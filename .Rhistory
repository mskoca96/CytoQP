# Normalize files
CytoNorm::QuantileNorm.normalize(model = model,
files = files,
labels = labels,
transformList = flowCore::transformList(channels,
CytoNorm::cytofTransform),
transformList.reverse = flowCore::transformList(channels,
CytoNorm::cytofTransform.reverse),
outputDir = norm_dir)
# Define files before normalization
gate_dir <- file.path(dir, "Gated")
files_before_norm <- list.files(gate_dir,
pattern = ".fcs",
full.names = T)
# Define files after normalization
norm_dir <- file.path(dir, "CytoNormed")
files_after_norm <- list.files(norm_dir,
pattern = ".fcs",
full.names = T)
# files needs to be in the same order, check and order if needed
test_match_order(x = basename(gsub("Norm_","",files_after_norm)),
basename(files_before_norm))
batch_labels <- stringr::str_match(basename(files_before_norm), "day[0-9]*")[,1]
# Extract cell frequency and MSI
mx <- extract_pctgs_msi_per_flowsom(files_after_norm = files_after_norm,
files_before_norm = files_before_norm,
nCells = 50000,
phenotyping_markers =  c("CD", "HLA", "IgD"),
functional_markers = c("MIP", "MCP", "IL",
"IFNa", "TNF", "TGF",
"Gr"),
xdim = 10,
ydim = 10,
n_metaclusters = 35,
out_dir = norm_dir,
arcsine_transform = TRUE,
save_matrix = TRUE,
seed = 343)
channels
# create the list to store the plots
plots <- list()
for (name in names(mx[[1]])){
df_plot <- prepare_data_for_plotting(frequency_msi_list = mx,
matrix_type = name,
n_neighbours = 11, seed = 35)
batch <- stringr::str_match(rownames(df_plot), "day[0-9]*")[,1]
samples_id <- ifelse(grepl("REF", rownames(df_plot)),"REF",
ifelse(grepl("p2", rownames(df_plot)), "p2", "p1"))
stimulation <- stringr::str_match(rownames(df_plot), "UNS|RSQ|IMQ|LPS|CPG")[,1]
plots[[name]] <- plot_batch_using_freq_msi(df_plot = df_plot, fill = batch,
shape = samples_id, color = batch,
split_by_normalization  = TRUE, title = name)
}
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
df_plot = df_plot
fill = batch
shape = samples_id
color = batch
title = name
p <- ggplot(df_plot, aes(x = dim1, y = dim2))+
geom_point(data=df_plot, aes(x=dim1, y=dim2, fill = fill,
shape = shape, color = color),
size = 3)+
ggtitle(title)
p
df_plot$normalization <- factor(df_plot$normalization,
levels = c("Raw", "Normalized"))
df_plot$normalization
p <- p + facet_wrap(~normalization)
p
p <- p + facet_grid(~normalization)
p
df_plot$normalization
levels(df_plot$normalization)
p <- ggplot(df_plot, aes(x = dim1, y = dim2))+
geom_point(data=df_plot, aes(x=dim1, y=dim2, fill = fill,
shape = shape, color = color),
size = 3)+
ggtitle(title)+
facet_wrap(~normalization)
p
document()
load_all()
# create the list to store the plots
plots <- list()
for (name in names(mx[[1]])){
df_plot <- prepare_data_for_plotting(frequency_msi_list = mx,
matrix_type = name,
n_neighbours = 11, seed = 35)
batch <- stringr::str_match(rownames(df_plot), "day[0-9]*")[,1]
samples_id <- ifelse(grepl("REF", rownames(df_plot)),"REF",
ifelse(grepl("p2", rownames(df_plot)), "p2", "p1"))
stimulation <- stringr::str_match(rownames(df_plot), "UNS|RSQ|IMQ|LPS|CPG")[,1]
plots[[name]] <- plot_batch_using_freq_msi(df_plot = df_plot, fill = batch,
shape = samples_id, color = batch,
split_by_normalization  = TRUE, title = name)
}
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
# create the list to store the plots
plots <- list()
for (name in names(mx[[1]])){
df_plot <- prepare_data_for_plotting(frequency_msi_list = mx,
matrix_type = name,
n_neighbours = 11, seed = 35)
batch <- stringr::str_match(rownames(df_plot), "day[0-9]*")[,1]
samples_id <- ifelse(grepl("REF", rownames(df_plot)),"REF",
ifelse(grepl("p2", rownames(df_plot)), "p2", "p1"))
stimulation <- stringr::str_match(rownames(df_plot), "UNS|RSQ|IMQ|LPS|CPG")[,1]
plots[[name]] <- plot_batch_using_freq_msi(df_plot = df_plot, fill = batch,
shape = samples_id, color = batch,
split_by_normalization  = TRUE, title = name)
}
document()
load_all()
# create the list to store the plots
plots <- list()
for (name in names(mx[[1]])){
df_plot <- prepare_data_for_plotting(frequency_msi_list = mx,
matrix_type = name,
n_neighbours = 11, seed = 35)
batch <- stringr::str_match(rownames(df_plot), "day[0-9]*")[,1]
samples_id <- ifelse(grepl("REF", rownames(df_plot)),"REF",
ifelse(grepl("p2", rownames(df_plot)), "p2", "p1"))
stimulation <- stringr::str_match(rownames(df_plot), "UNS|RSQ|IMQ|LPS|CPG")[,1]
plots[[name]] <- plot_batch_using_freq_msi(df_plot = df_plot, fill = batch,
shape = samples_id, color = batch,
split_by_normalization  = TRUE, title = name)
}
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
# create the list to store the plots
plots <- list()
for (name in names(mx[[1]])){
df_plot <- prepare_data_for_plotting(frequency_msi_list = mx,
matrix_type = name,
n_neighbours = 11, seed = 35)
batch <- stringr::str_match(rownames(df_plot), "day[0-9]*")[,1]
samples_id <- ifelse(grepl("REF", rownames(df_plot)),"REF",
ifelse(grepl("p2", rownames(df_plot)), "p2", "p1"))
stimulation <- stringr::str_match(rownames(df_plot), "UNS|RSQ|IMQ|LPS|CPG")[,1]
plots[[name]] <- plot_batch_using_freq_msi(df_plot = df_plot, fill = batch,
shape = samples_id, color = batch,
split_by_normalization  = TRUE, title = name)
}
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
document()
load_all()
# create the list to store the plots
plots <- list()
for (name in names(mx[[1]])){
df_plot <- prepare_data_for_plotting(frequency_msi_list = mx,
matrix_type = name,
n_neighbours = 11, seed = 35)
batch <- stringr::str_match(rownames(df_plot), "day[0-9]*")[,1]
samples_id <- ifelse(grepl("REF", rownames(df_plot)),"REF",
ifelse(grepl("p2", rownames(df_plot)), "p2", "p1"))
stimulation <- stringr::str_match(rownames(df_plot), "UNS|RSQ|IMQ|LPS|CPG")[,1]
plots[[name]] <- plot_batch_using_freq_msi(df_plot = df_plot, fill = batch,
shape = samples_id, color = batch,
split_by_normalization  = TRUE, title = name)
}
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
document()
load_all()
mx
document()
load_all()
# create the list to store the plots
plots <- list()
for (name in names(mx[[1]])){
df_plot <- prepare_data_for_plotting(frequency_msi_list = mx,
matrix_type = name,
n_neighbours = 11, seed = 35)
batch <- stringr::str_match(rownames(df_plot), "day[0-9]*")[,1]
samples_id <- ifelse(grepl("REF", rownames(df_plot)),"REF",
ifelse(grepl("p2", rownames(df_plot)), "p2", "p1"))
stimulation <- stringr::str_match(rownames(df_plot), "UNS|RSQ|IMQ|LPS|CPG")[,1]
plots[[name]] <- plot_batch_using_freq_msi(df_plot = df_plot, fill = batch,
shape = samples_id, color = batch,
split_by_normalization  = TRUE, title = name)
}
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
# create the list to store the plots
plots <- list()
for (name in names(mx[[1]])){
df_plot <- prepare_data_for_plotting(frequency_msi_list = mx,
matrix_type = name,
n_neighbours = 11, seed = 35)
batch <- stringr::str_match(rownames(df_plot), "day[0-9]*")[,1]
samples_id <- ifelse(grepl("REF", rownames(df_plot)),"REF",
ifelse(grepl("p2", rownames(df_plot)), "p2", "p1"))
stimulation <- stringr::str_match(rownames(df_plot), "UNS|RSQ|IMQ|LPS|CPG")[,1]
plots[[name]] <- plot_batch_using_freq_msi(df_plot = df_plot, fill = batch,
shape = samples_id, color = batch,
split_by_normalization  = TRUE, title = name)
}
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
a <- 3
b <= 4
b <- 4
c<- 5
tmp <- c(a, b, c)
sd(tmp)
a <- 0.1
b<- 0.3
c<- 0.5
tmp <- c(a, b, c)
sd(tmp)
document()
load_all()
# Extract cell frequency and MSI
mx <- extract_pctgs_msi_per_flowsom(files_after_norm = files_after_norm,
files_before_norm = files_before_norm,
nCells = 50000,
phenotyping_markers =  c("CD", "HLA", "IgD"),
functional_markers = c("MIP", "MCP", "IL",
"IFNa", "TNF", "TGF",
"Gr"),
xdim = 10,
ydim = 10,
n_metaclusters = 35,
out_dir = norm_dir,
arcsine_transform = TRUE,
save_matrix = TRUE,
seed = 343,
impute_0_values = TRUE)
library(devtools)
document()
load_all()
document()
document()
load_all()
# ------------------------------------------------------------------------------
# Bead normalization -----------------------------------------------------------
#-------------------------------------------------------------------------------
dir <- getwd()
# Set input directory
gate_dir <- file.path(dir, "Gated")
gate_dir
# Define files for normalization including reference sample
files_ref <- list.files(gate_dir,
pattern = "*_gated.fcs$",
full.names = TRUE,
recursive = T)
files_ref
df <- data.frame("file_paths" = files_ref,
"batch_labels" = stringr::str_match(files_ref, "day[0-9]*")[,1],
"ref_ids" = grepl("REF", files_ref))
df
model <- train_REF_model(df = df,
markers_to_normalize = c("CD", "HLA", "IgD",
"IL", "TN", "MCP", "MIP",
"Gran", "IFNa"),
arcsine_transform = TRUE,
nQ = 2,
limit = c(0,8),
quantileValues = c(0.05, 0.95),
goal = "mean",
norm_with_clustering = FALSE,
save_model = TRUE,
clustering_markers = c("CD", "HLA", "IgD"))
# Normalize files
normalize_REF(model = model, df = df, arcsine_transform = TRUE,
norm_with_clustering = FALSE)
# Define files before normalization
gate_dir <- file.path(dir, "Gated")
files_before_norm <- list.files(gate_dir,
pattern = ".fcs",
full.names = T)
# Define files after normalization
norm_dir <- file.path(dir, "CytoNormed")
files_after_norm <- list.files(norm_dir,
pattern = ".fcs",
full.names = T)
# files needs to be in the same order, check and order if needed
test_match_order(x = basename(gsub("Norm_","",files_after_norm)),
basename(files_before_norm))
batch_labels <- stringr::str_match(basename(files_before_norm), "day[0-9]*")[,1]
# Extract cell frequency and MSI
mx <- extract_pctgs_msi_per_flowsom(files_after_norm = files_after_norm,
files_before_norm = files_before_norm,
nCells = 50000,
phenotyping_markers =  c("CD", "HLA", "IgD"),
functional_markers = c("MIP", "MCP", "IL",
"IFNa", "TNF", "TGF",
"Gr"),
xdim = 10,
ydim = 10,
n_metaclusters = 35,
out_dir = norm_dir,
arcsine_transform = TRUE,
save_matrix = TRUE,
seed = 343,
impute_0_values = TRUE)
meta_data <- read.csv(file = file.path("/PhD/Rscripts/CytoQP_toImprove", "meta_data.csv"))
meta_data
meta_data <- read.csv(file = file.path("/PhD/Rscripts/CytoQP_toImprove", "meta_data.csv"))
usethis::use_data(meta_data)
document()
usethis::use_data(meta_data, overwrite = TRUE)
document()
load_all()
meta_data
# create the list to store the plots
plots <- list()
for (name in names(mx[[1]])){
df_plot <- prepare_data_for_plotting(frequency_msi_list = mx,
matrix_type = name,
n_neighbours = 11, seed = 35)
batch <- stringr::str_match(rownames(df_plot), "day[0-9]*")[,1]
samples_id <- ifelse(grepl("REF", rownames(df_plot)),"REF",
ifelse(grepl("p2", rownames(df_plot)), "p2", "p1"))
stimulation <- stringr::str_match(rownames(df_plot), "UNS|RSQ|IMQ|LPS|CPG")[,1]
plots[[name]] <- plot_batch_using_freq_msi(df_plot = df_plot, fill = batch,
shape = samples_id, color = batch,
split_by_normalization  = TRUE, title = name)
}
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
# create the list to store the plots
plots <- list()
for (name in names(mx[[1]])){
df_plot <- prepare_data_for_plotting(frequency_msi_list = mx,
matrix_type = name,
n_neighbours = 11, seed = 35)
batch <- stringr::str_match(rownames(df_plot), "day[0-9]*")[,1]
samples_id <- ifelse(grepl("REF", rownames(df_plot)),"REF",
ifelse(grepl("p2", rownames(df_plot)), "p2", "p1"))
stimulation <- stringr::str_match(rownames(df_plot), "UNS|RSQ|IMQ|LPS|CPG")[,1]
plots[[name]] <- plot_batch_using_freq_msi(df_plot = df_plot, fill = batch,
shape = samples_id, color = batch,
split_by_normalization  = TRUE, title = name)
}
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
ff <- flowCore::read.FCS(filename = file.path(gate_dir, "p2_UNS_day3_gated.fcs"))
markers<- FlowSOM::GetMarkers(ff)
markers<- FlowSOM::GetMarkers(ff, flowCore::colnames(ff))
markers
model <- train_REF_model(df = df,
markers_to_normalize = c("CD", "HLA", "IgD",
"IL", "TN", "MCP", "MIP",
"Gran", "IFNa", "TG"),
arcsine_transform = TRUE,
nQ = 2,
limit = c(0,8),
quantileValues = c(0.05, 0.95),
goal = "mean",
norm_with_clustering = FALSE,
save_model = TRUE)
# Normalize files
normalize_REF(model = model, df = df, arcsine_transform = TRUE,
norm_with_clustering = FALSE)
# Define files before normalization
gate_dir <- file.path(dir, "Gated")
files_before_norm <- list.files(gate_dir,
pattern = ".fcs",
full.names = T)
# Define files after normalization
norm_dir <- file.path(dir, "CytoNormed")
files_after_norm <- list.files(norm_dir,
pattern = ".fcs",
full.names = T)
# Define files before normalization
gate_dir <- file.path(dir, "Gated")
files_before_norm <- list.files(gate_dir,
pattern = ".fcs",
full.names = T)
# Define files after normalization
norm_dir <- file.path(dir, "CytoNormed")
files_after_norm <- list.files(norm_dir,
pattern = ".fcs",
full.names = T)
# files needs to be in the same order, check and order if needed
test_match_order(x = basename(gsub("Norm_","",files_after_norm)),
basename(files_before_norm))
batch_labels <- stringr::str_match(basename(files_before_norm), "day[0-9]*")[,1]
# Extract cell frequency and MSI
mx <- extract_pctgs_msi_per_flowsom(files_after_norm = files_after_norm,
files_before_norm = files_before_norm,
nCells = 50000,
phenotyping_markers =  c("CD", "HLA", "IgD"),
functional_markers = c("MIP", "MCP", "IL",
"IFNa", "TNF", "TGF",
"Gr"),
xdim = 10,
ydim = 10,
n_metaclusters = 35,
out_dir = norm_dir,
arcsine_transform = TRUE,
save_matrix = TRUE,
seed = 343,
impute_0_values = TRUE)
# create the list to store the plots
plots <- list()
for (name in names(mx[[1]])){
df_plot <- prepare_data_for_plotting(frequency_msi_list = mx,
matrix_type = name,
n_neighbours = 11, seed = 35)
batch <- stringr::str_match(rownames(df_plot), "day[0-9]*")[,1]
samples_id <- ifelse(grepl("REF", rownames(df_plot)),"REF",
ifelse(grepl("p2", rownames(df_plot)), "p2", "p1"))
stimulation <- stringr::str_match(rownames(df_plot), "UNS|RSQ|IMQ|LPS|CPG")[,1]
plots[[name]] <- plot_batch_using_freq_msi(df_plot = df_plot, fill = batch,
shape = samples_id, color = batch,
split_by_normalization  = TRUE, title = name)
}
gg_a <- grid_arrange_common_legend(plot_lists = plots, nrow = 2, ncol = 2,
position = "right")
ggplot2::ggsave(filename ="batch_effect_frequency_MSI.png",
device = "png",
path = norm_dir,
plot = gg_a,
units = "cm",
width = 22,
height = 14, dpi = 300)
library(devtools)
devtools::build()
?devtools::build
getwd()
?devtools::build
devtools::build()
devtools::install()
devtools::build()
devtools::install()
